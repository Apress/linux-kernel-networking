chapter 3
----------

static const struct net_protocol icmp_protocol = {
	.handler = icmp_rcv,
	.err_handler = icmp_err,
	.no_policy = 1,
	.netns_ok = 1,
};
(net/ipv4/af_inet.c)

static int __init inet_init(void) {
	...
	if (inet_add_protocol(&icmp_protocol, IPPROTO_ICMP) < 0)
		pr_crit("%s: Cannot add ICMP protocol\n", __func__);
	...
	
int __net_init icmp_sk_init(struct net *net)
{
	. . .
	for_each_possible_cpu(i) {
		struct sock *sk;
		err = inet_ctl_sock_create(&sk, PF_INET,
			SOCK_RAW, IPPROTO_ICMP, net);
		if (err < 0)
			goto fail;
		net->ipv4.icmp_sk[i] = sk;
		. . .
	sock_set_flag(sk, SOCK_USE_WRITE_QUEUE);
	inet_sk(sk)->pmtudisc = IP_PMTUDISC_DONT;
	}
	. . .
}

struct icmphdr {
	_u8 type;
	_u8 code;
	_sum16 checksum;
	union {
	struct {
	_be16 id;
	_be16 sequence;
	} echo;
	_be32 gateway;
	struct {
	_be16 __unused;
	_be16 mtu;
	} frag;
	} un;
	};
(include/uapi/linux/icmp.h)

struct icmp_control {
	void (*handler)(struct sk_buff *skb);
	short error; /* This ICMP is classed as an error message */
};

static int ip_local_deliver_finish(struct sk_buff *skb)
{
	. . .
	int protocol = ip_hdr(skb)->protocol;
	const struct net_protocol *ipprot;
	int raw;
	resubmit:
		raw = raw_local_deliver(skb, protocol);
		ipprot = rcu_dereference(inet_protos[protocol]);
		if (ipprot != NULL) {
			int ret;
			. . .
			ret = ipprot->handler(skb);
			. . .
(net/ipv4/ip_input.c)

struct icmp_bxm {
	struct sk_buff *skb;
	int offset;
	int data_len;
	struct {
		struct icmphdr icmph;
		_be32 times[3];
	} data;
	int head_len;
	struct ip_options_data replyopts;
};

static const struct icmp_control icmp_pointers[NR_ICMP_TYPES + 1] = {
...
	[ICMP_ECHO] = {
		.handler = icmp_echo,
	},
...
}

static int ip_local_deliver_finish(struct sk_buff *skb)
{
...
	int protocol = ip_hdr(skb)->protocol;
	const struct net_protocol *ipprot;
	int raw;
	resubmit:
	raw = raw_local_deliver(skb, protocol);
	ipprot = rcu_dereference(inet_protos[protocol]);
	if (ipprot != NULL) {
		...
	} else {
	if (!raw) {
	if (xfrm4_policy_check(NULL, XFRM_POLICY_IN, skb)) {
		IP_INC_STATS_BH(net, IPSTATS_MIB_INUNKNOWNPROTOS);
		icmp_send(skb, ICMP_DEST_UNREACH,ICMP_PROT_UNREACH, 0);
		}
		...
	}
(net/ipv4/ip_input.c)

int __udp4_lib_rcv(struct sk_buff *skb, struct udp_table *udptable, int proto)
{
	struct sock *sk;
	...
	sk = __udp4_lib_lookup_skb(skb, uh->source, uh->dest, udptable)
	...
	if (sk != NULL) {
		...
	}
	/* No socket. Drop packet silently, if checksum is wrong */
	if (udp_lib_checksum_complete(skb))
		goto csum_error;
	UDP_INC_STATS_BH(net, UDP_MIB_NOPORTS, proto == IPPROTO_UDPLITE);
	icmp_send(skb, ICMP_DEST_UNREACH, ICMP_PORT_UNREACH, 0);
	...
	}
	...
}
(net/ipv4/udp.c)

int ip_forward(struct sk_buff *skb)
{
	...
	struct rtable *rt; /* Route we use */
	...
	if (unlikely(skb->len > dst_mtu(&rt->dst) && !skb_is_gso(skb) &&
		(ip_hdr(skb)->frag_off & htons(IP_DF))) && !skb->local_df) {
		IP_INC_STATS(dev_net(rt->dst.dev), IPSTATS_MIB_FRAGFAILS);
		icmp_send(skb, ICMP_DEST_UNREACH, ICMP_FRAG_NEEDED,
			htonl(dst_mtu(&rt->dst)));
		goto drop;
		}
		...
}
(net/ipv4/ip_forward.c)


int ip_forward(struct sk_buff *skb)
{
	struct ip_options *opt = &(IPCB(skb)->opt);
	...
	if (opt->is_strictroute && rt->rt_uses_gateway)
		goto sr_failed;
	...
sr_failed:
	icmp_send(skb, ICMP_DEST_UNREACH, ICMP_SR_FAILED, 0);
	goto drop;
}
(net/ipv4/ip_forward.c)

static const struct inet6_protocol icmpv6_protocol = {
	.handler = icmpv6_rcv,
	.err_handler = icmpv6_err,
	.flags = INET6_PROTO_NOPOLICY|INET6_PROTO_FINAL,
};

int __init icmpv6_init(void)
{
	int err;
	...
	if (inet6_add_protocol(&icmpv6_protocol, IPPROTO_ICMPV6) < 0)
		goto fail;
	return 0;
}

static int __net_init icmpv6_sk_init(struct net *net)
{
	struct sock *sk;
	...
	for_each_possible_cpu(i) {
		err = inet_ctl_sock_create(&sk, PF_INET6,
			SOCK_RAW, IPPROTO_ICMPV6, net);
		...
		net->ipv6.icmp_sk[i] = sk;
		...
	}
	
struct icmp6hdr {
	_u8 icmp6_type;
	_u8 icmp6_code;
	_sum16 icmp6_cksum;
	...
}	

int ip6_forward(struct sk_buff *skb)
{
	...
	if (hdr->hop_limit <= 1) {
		/* Force OUTPUT device used as source address */
		skb->dev = dst->dev;
		icmpv6_send(skb, ICMPV6_TIME_EXCEED, ICMPV6_EXC_HOPLIMIT, 0);
		IP6_INC_STATS_BH(net,
				 ip6_dst_idev(dst), IPSTATS_MIB_INHDRERRORS);
		kfree_skb(skb);
		return -ETIMEDOUT;
	}
	...
}
(net/ipv6/ip6_output.c)

void ip6_expire_frag_queue(struct net *net, struct frag_queue *fq,
		           struct inet_frags *frags)
{
	...
	icmpv6_send(fq->q.fragments, ICMPV6_TIME_EXCEED, ICMPV6_EXC_FRAGTIME, 0);
	...
}
(net/ipv6/reassembly.c)

int __udp6_lib_rcv(struct sk_buff *skb, struct udp_table *udptable, int proto)
{
	...
	sk = __udp6_lib_lookup_skb(skb, uh->source, uh->dest, udptable);
	if (sk != NULL) {
	...
	}
	...
	if (udp_lib_checksum_complete(skb))
		goto discard;
	UDP6_INC_STATS_BH(net, UDP_MIB_NOPORTS, proto == IPPROTO_UDPLITE);
	icmpv6_send(skb, ICMPV6_DEST_UNREACH, ICMPV6_PORT_UNREACH, 0);
	...
}

int ip6_forward(struct sk_buff *skb)
{
...
	if ((!skb->local_df && skb->len > mtu && !skb_is_gso(skb)) ||
		(IP6CB(skb)->frag_max_size && IP6CB(skb)->frag_max_size > mtu)) {
		/* Again, force OUTPUT device used as source address */
		skb->dev = dst->dev;
		icmpv6_send(skb, ICMPV6_PKT_TOOBIG, 0, mtu);
		IP6_INC_STATS_BH(net,
			ip6_dst_idev(dst), IPSTATS_MIB_INTOOBIGERRORS);
		IP6_INC_STATS_BH(net,
			ip6_dst_idev(dst), IPSTATS_MIB_FRAGFAILS);
		kfree_skb(skb);
		return -EMSGSIZE;
}
...
}
(net/ipv6/ip6_output.c)


static bool ip6_tlvopt_unknown(struct sk_buff *skb, int optoff) {
	switch ((skb_network_header(skb)[optoff] & 0xC0) >> 6) {
	...
	case 2: /* send ICMP PARM PROB regardless and drop packet */
		icmpv6_param_prob(skb, ICMPV6_UNK_OPTION, optoff);
		return false;
}
(net/ipv6/exthdrs.c)

static inline int ping_supported(int family, int type, int code)
{
	return (family == AF_INET && type == ICMP_ECHO && code == 0) ||
		(family == AF_INET6 && type == ICMPV6_ECHO_REQUEST && code == 0);
}
(net/ipv4/ping.c)



