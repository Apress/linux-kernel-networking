chapter 8
----------
struct in6_addr {
	union {
		_u8 u6_addr8[16];
		_be16 u6_addr16[8];
		_be32 u6_addr32[4];
	} in6_u;
#define s6_addr in6_u.u6_addr8
#define s6_addr16 in6_u.u6_addr16
#define s6_addr32 in6_u.u6_addr32
};
(include/uapi/linux/in6.h)

struct ipv6hdr {
#if defined(__LITTLE_ENDIAN_BITFIELD)
	_u8 priority:4,
	version:4;
#elif defined(__BIG_ENDIAN_BITFIELD)
	_u8 version:4,
	priority:4;
#else
#error "Please fix <asm/byteorder.h>"
#endif
	_u8 flow_lbl[3];
	_be16 payload_len;
	_u8 nexthdr;
	_u8 hop_limit;
	struct in6_addr saddr;
	struct in6_addr daddr;
};
(include/uapi/linux/ipv6.h)

static const struct inet6_protocol frag_protocol =
{
	.handler = ipv6_frag_rcv,
	.flags = INET6_PROTO_NOPOLICY,
};

int __init ipv6_frag_init(void)
{
	int ret;
	ret = inet6_add_protocol(&frag_protocol, IPPROTO_FRAGMENT);
	. . .
(net/ipv6/reassembly.c)


static struct packet_type ipv6_packet_type __read_mostly = {
	.type = cpu_to_be16(ETH_P_IPV6),
	.func = ipv6_rcv,
};

static int __init ipv6_packet_init(void)
{
	dev_add_pack(&ipv6_packet_type);
	return 0;
}
(net/ipv6/af_inet6.c)

int ipv6_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt,
		struct net_device *orig_dev)
{
	const struct ipv6hdr *hdr;
	u32 pkt_len;
	struct inet6_dev *idev;
	struct net *net = dev_net(skb->dev);
	. . . 
	hdr = ipv6_hdr(skb);
	if (hdr->version != 6)
		goto err;
	/*
	* RFC4291 2.5.3
	* A packet received on an interface with a destination address
	* of loopback must be dropped.
	*/
	if (!(dev->flags & IFF_LOOPBACK) &&
		ipv6_addr_loopback(&hdr->daddr))
		goto err;
		. . .
	/*
	* RFC4291 2.7
	* Multicast addresses must not be used as source addresses in IPv6
	* packets or appear in any Routing header.
	*/
	if (ipv6_addr_is_multicast(&hdr->saddr))
		goto err;
	. . .
	if (hdr->nexthdr == NEXTHDR_HOP) {
		if (ipv6_parse_hopopts(skb) < 0) {
			IP6_INC_STATS_BH(net, idev, IPSTATS_MIB_INHDRERRORS);
			rcu_read_unlock();
			return NET_RX_DROP;
		}
	}

	return NF_HOOK(NFPROTO_IPV6, NF_INET_PRE_ROUTING, skb, dev, NULL,
			ip6_rcv_finish);
err:
	IP6_INC_STATS_BH(net, idev, IPSTATS_MIB_INHDRERRORS);
drop:
	rcu_read_unlock();
	kfree_skb(skb);
	return NET_RX_DROP;
}		
(net/ipv6/ip6_input.c)

int ip6_rcv_finish(struct sk_buff *skb)
{
. . .
	if (!skb_dst(skb))
		ip6_route_input(skb);
	return dst_input(skb);
}

(net/ipv6/ip6_input.c)


int ip6_input(struct sk_buff *skb)
{
	return NF_HOOK(NFPROTO_IPV6, NF_INET_LOCAL_IN, skb, skb->dev, NULL,
		ip6_input_finish);
}
(net/ipv6/ip6_input.c)


static int ip6_input_finish(struct sk_buff *skb)
{
        struct net *net = dev_net(skb_dst(skb)->dev);
        const struct inet6_protocol *ipprot;
        struct inet6_dev *idev;
        unsigned int nhoff;
        int nexthdr;
        bool raw;

        /*
         *      Parse extension headers
         */

        rcu_read_lock();
resubmit:
        idev = ip6_dst_idev(skb_dst(skb));
        if (!pskb_pull(skb, skb_transport_offset(skb)))
                goto discard;
        nhoff = IP6CB(skb)->nhoff;
        nexthdr = skb_network_header(skb)[nhoff];

        raw = raw6_local_deliver(skb, nexthdr);
        if ((ipprot = rcu_dereference(inet6_protos[nexthdr])) != NULL) {
                int ret;

                if (ipprot->flags & INET6_PROTO_FINAL) {
                        const struct ipv6hdr *hdr;

                        /* Free reference early: we don't need it any more,
                           and it may hold ip_conntrack module loaded
                           indefinitely. */
                        nf_reset(skb);

                        skb_postpull_rcsum(skb, skb_network_header(skb),
                                           skb_network_header_len(skb));
                        hdr = ipv6_hdr(skb);
                        if (ipv6_addr_is_multicast(&hdr->daddr) &&
                            !ipv6_chk_mcast_addr(skb->dev, &hdr->daddr,
                            &hdr->saddr) &&
                            !ipv6_is_mld(skb, nexthdr, skb_network_header_len(skb)))
                                goto discard;
                }
                if (!(ipprot->flags & INET6_PROTO_NOPOLICY) &&
                    !xfrm6_policy_check(NULL, XFRM_POLICY_IN, skb))
                        goto discard;

                ret = ipprot->handler(skb);
                if (ret > 0)
                        goto resubmit;
                else if (ret == 0)
                        IP6_INC_STATS_BH(net, idev, IPSTATS_MIB_INDELIVERS);
        } else {
                if (!raw) {
                        if (xfrm6_policy_check(NULL, XFRM_POLICY_IN, skb)) {
                                IP6_INC_STATS_BH(net, idev,
                                                 IPSTATS_MIB_INUNKNOWNPROTOS);
                                icmpv6_send(skb, ICMPV6_PARAMPROB,
                                            ICMPV6_UNK_NEXTHDR, nhoff);
                        }
                        kfree_skb(skb);
                } else {
                        IP6_INC_STATS_BH(net, idev, IPSTATS_MIB_INDELIVERS);
                        consume_skb(skb);
                }
        }
        rcu_read_unlock();
        return 0;

discard:
        IP6_INC_STATS_BH(net, idev, IPSTATS_MIB_INDISCARDS);
        rcu_read_unlock();
        kfree_skb(skb);
        return 0;
}

int ip6_forward(struct sk_buff *skb)
{
        struct dst_entry *dst = skb_dst(skb);
        struct ipv6hdr *hdr = ipv6_hdr(skb);
        struct inet6_skb_parm *opt = IP6CB(skb);
        struct net *net = dev_net(dst->dev);
        u32 mtu;

        if (net->ipv6.devconf_all->forwarding == 0)
                goto error;

        if (skb_warn_if_lro(skb))
                goto drop;

        if (!xfrm6_policy_check(NULL, XFRM_POLICY_FWD, skb)) {
                IP6_INC_STATS(net, ip6_dst_idev(dst), IPSTATS_MIB_INDISCARDS);
                goto drop;
        }

        if (skb->pkt_type != PACKET_HOST)
                goto drop;

        skb_forward_csum(skb);

        /*
         *      We DO NOT make any processing on
         *      RA packets, pushing them to user level AS IS
         *      without ane WARRANTY that application will be able
         *      to interpret them. The reason is that we
         *      cannot make anything clever here.
         *
         *      We are not end-node, so that if packet contains
         *      AH/ESP, we cannot make anything.
         *      Defragmentation also would be mistake, RA packets
         *      cannot be fragmented, because there is no warranty
         *      that different fragments will go along one path. --ANK
         */
        if (opt->ra) {
                u8 *ptr = skb_network_header(skb) + opt->ra;
                if (ip6_call_ra_chain(skb, (ptr[2]<<8) + ptr[3]))
                        return 0;
        }

        /*
         *      check and decrement ttl
         */
        if (hdr->hop_limit <= 1) {
                /* Force OUTPUT device used as source address */
                skb->dev = dst->dev;
                icmpv6_send(skb, ICMPV6_TIME_EXCEED, ICMPV6_EXC_HOPLIMIT, 0);
                IP6_INC_STATS_BH(net,
                                 ip6_dst_idev(dst), IPSTATS_MIB_INHDRERRORS);

                kfree_skb(skb);
                return -ETIMEDOUT;
        }

        /* XXX: idev->cnf.proxy_ndp? */
        if (net->ipv6.devconf_all->proxy_ndp &&
            pneigh_lookup(&nd_tbl, net, &hdr->daddr, skb->dev, 0)) {
                int proxied = ip6_forward_proxy_check(skb);
                if (proxied > 0)
                        return ip6_input(skb);
                else if (proxied < 0) {
                        IP6_INC_STATS(net, ip6_dst_idev(dst),
                                      IPSTATS_MIB_INDISCARDS);
                        goto drop;
                }
        }

        if (!xfrm6_route_forward(skb)) {
                IP6_INC_STATS(net, ip6_dst_idev(dst), IPSTATS_MIB_INDISCARDS);
                goto drop;
        }
        dst = skb_dst(skb);

        /* IPv6 specs say nothing about it, but it is clear that we cannot
           send redirects to source routed frames.
           We don't send redirects to frames decapsulated from IPsec.
         */
        if (skb->dev == dst->dev && opt->srcrt == 0 && !skb_sec_path(skb)) {
                struct in6_addr *target = NULL;
                struct inet_peer *peer;
                struct rt6_info *rt;

                /*
                 *      incoming and outgoing devices are the same
                 *      send a redirect.
                 */

                rt = (struct rt6_info *) dst;
                if (rt->rt6i_flags & RTF_GATEWAY)
                        target = &rt->rt6i_gateway;
                else
                        target = &hdr->daddr;

                peer = inet_getpeer_v6(net->ipv6.peers, &rt->rt6i_dst.addr, 1);

                /* Limit redirects both by destination (here)
                   and by source (inside ndisc_send_redirect)
                 */
                if (inet_peer_xrlim_allow(peer, 1*HZ))
                        ndisc_send_redirect(skb, target);
                if (peer)
                        inet_putpeer(peer);
        } else {
                int addrtype = ipv6_addr_type(&hdr->saddr);

                /* This check is security critical. */
                if (addrtype == IPV6_ADDR_ANY ||
                    addrtype & (IPV6_ADDR_MULTICAST | IPV6_ADDR_LOOPBACK))
                        goto error;
                if (addrtype & IPV6_ADDR_LINKLOCAL) {
                        icmpv6_send(skb, ICMPV6_DEST_UNREACH,
                                    ICMPV6_NOT_NEIGHBOUR, 0);
                        goto error;
                }
        }

        mtu = dst_mtu(dst);
        if (mtu < IPV6_MIN_MTU)
                mtu = IPV6_MIN_MTU;

        if ((!skb->local_df && skb->len > mtu && !skb_is_gso(skb)) ||
            (IP6CB(skb)->frag_max_size && IP6CB(skb)->frag_max_size > mtu)) {
                /* Again, force OUTPUT device used as source address */
                skb->dev = dst->dev;
                icmpv6_send(skb, ICMPV6_PKT_TOOBIG, 0, mtu);
                IP6_INC_STATS_BH(net,
                                 ip6_dst_idev(dst), IPSTATS_MIB_INTOOBIGERRORS);
                IP6_INC_STATS_BH(net,
                                 ip6_dst_idev(dst), IPSTATS_MIB_FRAGFAILS);
                kfree_skb(skb);
                return -EMSGSIZE;
        }

        if (skb_cow(skb, dst->dev->hard_header_len)) {
                IP6_INC_STATS(net, ip6_dst_idev(dst), IPSTATS_MIB_OUTDISCARDS);
                goto drop;
        }

        hdr = ipv6_hdr(skb);

        /* Mangling hops number delayed to point after skb COW */

        hdr->hop_limit--;

        IP6_INC_STATS_BH(net, ip6_dst_idev(dst), IPSTATS_MIB_OUTFORWDATAGRAMS);
        IP6_ADD_STATS_BH(net, ip6_dst_idev(dst), IPSTATS_MIB_OUTOCTETS, skb->len);
        return NF_HOOK(NFPROTO_IPV6, NF_INET_FORWARD, skb, skb->dev, dst->dev,
                       ip6_forward_finish);

error:
        IP6_INC_STATS_BH(net, ip6_dst_idev(dst), IPSTATS_MIB_INADDRERRORS);
drop:
        kfree_skb(skb);
        return -EINVAL;
}

(net/ipv6/ip6_output.c)

static inline int ip6_forward_finish(struct sk_buff *skb)
{
	return dst_output(skb);
}

int ip6_mc_input(struct sk_buff *skb)
{
	const struct ipv6hdr *hdr;
	bool deliver;
	IP6_UPD_PO_STATS_BH(dev_net(skb_dst(skb)->dev),
		ip6_dst_idev(skb_dst(skb)), IPSTATS_MIB_INMCAST,
				skb->len);
	hdr = ipv6_hdr(skb);
	deliver = ipv6_chk_mcast_addr(skb->dev, &hdr->daddr, NULL);
	
#ifdef CONFIG_IPV6_MROUTE
. . .
	if (dev_net(skb->dev)->ipv6.devconf_all->mc_forwarding &&
		!(ipv6_addr_type(&hdr->daddr) &
			(IPV6_ADDR_LOOPBACK|IPV6_ADDR_LINKLOCAL)) &&
		likely(!(IP6CB(skb)->flags & IP6SKB_FORWARDED))) {
		/*
		* Okay, we try to forward - split and duplicate
		* packets.
		*/
		struct sk_buff *skb2;
		if (deliver)
			skb2 = skb_clone(skb, GFP_ATOMIC);
		else {
			skb2 = skb;
			skb = NULL;
		}
		if (skb2) {	
			ip6_mr_input(skb2);
		}
	} 
#endif
	if (likely(deliver))
		ip6_input(skb);
	else {
		/* discard */
		kfree_skb(skb);
	}
	return 0;
}
(net/ipv6/ip6_input.c)

static struct inet6_dev *ipv6_add_dev(struct net_device *dev) {
	. . .
	/* Join interface-local all-node multicast group */
	ipv6_dev_mc_inc(dev, & in6addr_interfacelocal_allnodes);
	/* Join all-node multicast group */
	ipv6_dev_mc_inc(dev, & in6addr_linklocal_allnodes);
	. . .
}

(net/ipv6/addrconf.c)
static void dev_forward_change(struct inet6_dev *idev)
{
	struct net_device *dev;
	struct inet6_ifaddr *ifa;
	. . .
	dev = idev->dev;
	. . .
	if (dev->flags & IFF_MULTICAST) {
		if (idev->cnf.forwarding) {
			ipv6_dev_mc_inc(dev, &in6addr_linklocal_allrouters);
			ipv6_dev_mc_inc(dev, &in6addr_interfacelocal_allrouters);
			ipv6_dev_mc_inc(dev, &in6addr_sitelocal_allrouters);
		} else {
			ipv6_dev_mc_dec(dev, &in6addr_linklocal_allrouters);
			ipv6_dev_mc_dec(dev, &in6addr_interfacelocal_allrouters);
			ipv6_dev_mc_dec(dev, &in6addr_sitelocal_allrouters);
		}
	}
	. . .
}
(net/ipv6/addrconf.c)


int sockd;
struct ipv6_mreq mcgroup;
struct addrinfo *results;
. . .
/* read an IPv6 multicast group address to which we want to join */
/* into the address info object (results) */
. . .
mcgroup.ipv6mr_interface=3;
memcpy(&(mcgroup.ipv6mr_multiaddr),
       &(((struct sockaddr_in6 *) results->ai_addr)->sin6_addr),
       sizeof(struct in6_addr));
sockd = socket(AF_INET6, SOCK_DGRAM,0);
status = setsockopt(sockd, IPPROTO_IPV6, IPV6_JOIN_GROUP,
		    &mcgroup, sizeof(mcgroup));


struct mld2_report {
	struct icmp6hdr mld2r_hdr;
	struct mld2_grec mld2r_grec[0];
};
(include/net/mld.h)

struct mld2_grec {
	_u8 grec_type;
	_u8 grec_auxwords;
	_be16 grec_nsrcs;
	struct in6_addr grec_mca;
	struct in6_addr grec_src[0];
};

(include/net/mld.h)

Example - Joining and Leaving a Multicast Group with Source Filtering
int sockd;
struct group_source_req mreq;
struct addrinfo *results1;
struct addrinfo *results2;
/* read an IPv6 multicast group address that we want to join into results1 */
/* read an IPv6 multicast group address which we want to allow into results2 */
memcpy(&(mreq.gsr_group), results1->ai_addr, sizeof(struct sockaddr_in6));
memcpy(&(mreq.gsr_source), results2->ai_addr, sizeof(struct sockaddr_in6));
mreq.gsr_interface = 3;
sockd = socket(AF_INET6, SOCK_DGRAM, 0);
setsockopt(sockd, IPPROTO_IPV6, MCAST_JOIN_SOURCE_GROUP, &mreq, sizeof(mreq));

Example: Using MCAST_MSFILTER for Source Filtering
struct group_filter
{
	/* Interface index. */
	uint32_t gf_interface;
	/* Group address. */
	struct sockaddr_storage gf_group;
	/* Filter mode. */
	uint32_t gf_fmode;
	/* Number of source addresses. */
	uint32_t gf_numsrc;
	/* Source addresses. */
	struct sockaddr_storage gf_slist[1];
};

(include/netinet/in.h)

struct ipv6_mreq mcgroup;
struct group_filter filter;
struct sockaddr_in6 *psin6;
int sockd[2];
inet_pton(AF_INET6,"ffff::9", &mcgroup.ipv6mr_multiaddr);
mcgroup.ipv6mr_interface=2;
filter.gf_interface = 2;
filter.gf_fmode = MCAST_INCLUDE;
filter.gf_numsrc = 3;
psin6 = (struct sockaddr_in6 *)&filter.gf_group;
psin6->sin6_family = AF_INET6;
inet_pton(PF_INET6, "ffff::9", &psin6->sin6_addr);
psin6 = (struct sockaddr_in6 *)&filter.gf_slist[0];
psin6->sin6_family = AF_INET6;
inet_pton(PF_INET6, "2000::1", &psin6->sin6_addr);
psin6 = (struct sockaddr_in6 *)&filter.gf_slist[1];
psin6->sin6_family = AF_INET6;
inet_pton(PF_INET6, "2000::2", &psin6->sin6_addr);
psin6 = (struct sockaddr_in6 *)&filter.gf_slist[2];
psin6->sin6_family = AF_INET6;
inet_pton(PF_INET6, "2000::3",&psin6->sin6_addr);
sockd[0] = socket(AF_INET6, SOCK_DGRAM,0);
status = setsockopt(sockd[0], IPPROTO_IPV6, IPV6_JOIN_GROUP,
			&mcgroup, sizeof(mcgroup));
status=setsockopt(sockd[0], IPPROTO_IPV6, MCAST_MSFILTER, &filter,
		GROUP_FILTER_SIZE(filter.gf_numsrc));
sockd[1] = socket(AF_INET6, SOCK_DGRAM,0);
filter.gf_fmode = MCAST_EXCLUDE;
filter.gf_numsrc = 2;
psin6 = (struct sockaddr_in6 *)&filter.gf_slist[0];
psin6->sin6_family = AF_INET6;
inet_pton(PF_INET6, "2001::1", &psin6->sin6_addr);
psin6 = (struct sockaddr_in6 *)&filter.gf_slist[1];
psin6->sin6_family = AF_INET6;
inet_pton(PF_INET6, "2001::2", &psin6->sin6_addr);
status = setsockopt(sockd[1], IPPROTO_IPV6, IPV6_JOIN_GROUP,
		    &mcgroup, sizeof(mcgroup));
status=setsockopt(sockd[1], IPPROTO_IPV6, MCAST_MSFILTER, &filter,
                  GROUP_FILTER_SIZE(filter.gf_numsrc));


