chapter 6
----------

struct mr_table {
	struct list_head list;
#ifdef CONFIG_NET_NS
	struct net *net;
#endif
	u32 id;
	struct sock __rcu *mroute_sk;
	struct timer_list ipmr_expire_timer;
	struct list_head mfc_unres_queue;
	struct list_head mfc_cache_array[MFC_LINES];
	struct vif_device vif_table[MAXVIFS];
. . .
};

(net/ipv4/ipmr.c)


struct mfc_cache {
	struct list_head list;
	_be32 mfc_mcastgrp;
	_be32 mfc_origin;
	vifi_t mfc_parent;
	int mfc_flags;
	union {
		struct {
			unsigned long expires;
			struct sk_buff_head unresolved; /* Unresolved buffers */
		} unres;
		struct {
			unsigned long last_assert;
			int minvif;
			int maxvif;
			unsigned long bytes;
			unsigned long pkt;
			unsigned long wrong_if;
			unsigned char ttls[MAXVIFS]; /* TTL thresholds */
		} res;
	} mfc_un;
	struct rcu_head rcu;
};
(include/linux/mroute.h)

static int ipmr_cache_unresolved(struct mr_table *mrt, vifi_t vifi, struct sk_buff *skb)
{
	. . .
	if (c->mfc_un.unres.unresolved.qlen > 3) {
		kfree_skb(skb);
		err = -ENOBUFS;
	} else {
		. . .
}
(net/ipv4/ipmr.c)

struct vifctl {
	vifi_t vifc_vifi; /* Index of VIF */
	unsigned char vifc_flags; /* VIFF_ flags */
	unsigned char vifc_threshold; /* ttl limit */
	unsigned int vifc_rate_limit; /* Rate limiter values (NI) */
	union {
		struct in_addr vifc_lcl_addr; /* Local interface address */
		int vifc_lcl_ifindex; /* Local interface index */
	};
	
	struct in_addr vifc_rmt_addr; /* IPIP tunnel addr */
	};
	
(include/uapi/linux/mroute.h)


struct vif_device {
	struct net_device *dev; /* Device we are using */
	unsigned long bytes_in,bytes_out;
	unsigned long pkt_in,pkt_out; /* Statistics */
	unsigned long rate_limit; /* Traffic shaping (NI) */
	unsigned char threshold; /* TTL threshold */
	unsigned short flags; /* Control flags */
	_be32 local,remote; /* Addresses(remote for tunnels)*/
	int link; /* Physical interface index */
};

(include/linux/mroute.h)


int ip_mr_input(struct sk_buff *skb)
{
	struct mfc_cache *cache;
	struct net *net = dev_net(skb->dev);
	
	int local = skb_rtable(skb)->rt_flags & RTCF_LOCAL;
	struct mr_table *mrt;
	
	/* Packet is looped back after forward, it should not be
	* forwarded second time, but still can be delivered locally.
	*/
	if (IPCB(skb)->flags & IPSKB_FORWARDED)
		goto dont_forward;
	
	mrt = ipmr_rt_fib_lookup(net, skb);
	if (IS_ERR(mrt)) {
		kfree_skb(skb);
		return PTR_ERR(mrt);
	}
	
	if (!local) {	
		if (IPCB(skb)->opt.router_alert) {
			if (ip_call_ra_chain(skb))
				return 0;
			} else if (ip_hdr(skb)->protocol == IPPROTO_IGMP) {
				/* IGMPv1 (and broken IGMPv2 implementations sort of
				* Cisco IOS <= 11.2(8)) do not put router alert
				* option to IGMP packets destined to routable
				* groups. It is very bad, because it means
				* that we can forward NO IGMP messages.
				*/
				struct sock *mroute_sk;
				mroute_sk = rcu_dereference(mrt->mroute_sk);
				if (mroute_sk) {
					nf_reset(skb);
					raw_rcv(mroute_sk, skb);
					return 0;
				}
			}
	}
	cache = ipmr_cache_find(mrt, ip_hdr(skb)->saddr, ip_hdr(skb)->daddr);
	if (cache == NULL) {
		int vif = ipmr_find_vif(mrt, skb->dev);	
		if (vif >= 0)
			cache = ipmr_cache_find_any(mrt, ip_hdr(skb)->daddr, vif);
			
	}
	/*
	* No usable cache entry
	*/
	if (cache == NULL) {
		int vif;
		if (local) {
			struct sk_buff *skb2 = skb_clone(skb, GFP_ATOMIC);
			ip_local_deliver(skb);
			if (skb2 == NULL)
				return -ENOBUFS;
			skb = skb2;
		}
		read_lock(&mrt_lock);
		vif = ipmr_find_vif(mrt, skb->dev);
		if (vif >= 0) {
			. . .

			
static struct mfc_cache *ipmr_cache_alloc_unres(void)
{
	struct mfc_cache *c = kmem_cache_zalloc(mrt_cachep, GFP_ATOMIC);
	if (c) {
		skb_queue_head_init(&c->mfc_un.unres.unresolved);
		
		c->mfc_un.unres.expires = jiffies + 10*HZ;
	}
	return c;
}


	
int ip_mr_input(struct sk_buff *skb) - continued:
...
			int err2 = ipmr_cache_unresolved(mrt, vif, skb);
			read_unlock(&mrt_lock);
			return err2;
		}
		read_unlock(&mrt_lock);
		kfree_skb(skb);
		return -ENODEV;
		}
	read_lock(&mrt_lock);

	ip_mr_forward(net, mrt, skb, cache, local);
	read_unlock(&mrt_lock);
	if (local)
		return ip_local_deliver(skb);
	return 0;
dont_forward:
	if (local)
		return ip_local_deliver(skb);
	kfree_skb(skb);
	return 0;
}


static int 	(struct net *net, struct mr_table *mrt,
			 struct sk_buff *skb, struct mfc_cache *cache,
			 int local)
{
	int psend = -1;
	int vif, ct;
	int true_vifi = ipmr_find_vif(mrt, skb->dev);
	vif = cache->mfc_parent;
	cache->mfc_un.res.pkt++;
	cache->mfc_un.res.bytes += skb->len;
	if (cache->mfc_origin == htonl(INADDR_ANY) && true_vifi >= 0) {
		struct mfc_cache *cache_proxy;
		
		/* For an (*,G) entry, we only check that the incomming
		* interface is part of the static tree.
		*/
			mrt, vif);
		if (cache_proxy &&
			cache_proxy->mfc_un.res.ttls[true_vifi] < 255)
		goto forward;
	}
	/*
	* Wrong interface: drop packet and (maybe) send PIM assert.
	*/
	if (mrt->vif_table[vif].dev != skb->dev) {
		if (rt_is_output_route(skb_rtable(skb))) {
			/* It is our own packet, looped back.
			* Very complicated situation...
			*
			* The best workaround until routing daemons will be
			* fixed is not to redistribute packet, if it was
			* send through wrong interface. It means, that
			* multicast applications WILL NOT work for
			* (S,G), which have default multicast route pointing
			* to wrong oif. In any case, it is not a good
			* idea to use multicasting applications on router.
			*/
			goto dont_forward;
		}
		cache->mfc_un.res.wrong_if++;
		if (true_vifi >= 0 && mrt->mroute_do_assert &&
			/* pimsm uses asserts, when switching from RPT to SPT,
			* so that we cannot check that packet arrived on an oif.
			* It is bad, but otherwise we would need to move pretty
			* large chunk of pimd to kernel. Ough... --ANK
			*/
			(mrt->mroute_do_pim ||
				cache->mfc_un.res.ttls[true_vifi] < 255) &&
			time_after(jiffies,
				cache->mfc_un.res.last_assert + MFC_ASSERT_THRESH)) {
			cache->mfc_un.res.last_assert = jiffies;
			ipmr_cache_report(mrt, skb, true_vifi, IGMPMSG_WRONGVIF);
		}
		goto dont_forward;
	}
forward:
	mrt->vif_table[vif].pkt_in++;
	mrt->vif_table[vif].bytes_in += skb->len;
	/*
	* Forward the frame
	*/
	if (cache->mfc_origin == htonl(INADDR_ANY) &&
		cache->mfc_mcastgrp == htonl(INADDR_ANY)) {
		if (true_vifi >= 0 &&
			true_vifi != cache->mfc_parent &&
			ip_hdr(skb)->ttl >
				cache->mfc_un.res.ttls[cache->mfc_parent]) {
		/* It's an (*,*) entry and the packet is not coming from
		* the upstream: forward the packet to the upstream
		* only.
		*/
		psend = cache->mfc_parent;
		goto last_forward;
		}
	goto dont_forward;
	}
	for (ct = cache->mfc_un.res.maxvif - 1;
		ct >= cache->mfc_un.res.minvif; ct--) {
		/* For (*,G) entry, don't forward to the incoming interface */
		if ((cache->mfc_origin != htonl(INADDR_ANY) ||
			ct != true_vifi) &&
			ip_hdr(skb)->ttl > cache->mfc_un.res.ttls[ct]) {
			if (psend != -1) {
				struct sk_buff *skb2 = skb_clone(skb, GFP_ATOMIC);

				if (skb2)
				ipmr_queue_xmit(net, mrt, skb2, cache,
					psend);
			}
		psend = ct;
		}
	}
last_forward:
	if (psend != -1) {
		if (local) {
			struct sk_buff *skb2 = skb_clone(skb, GFP_ATOMIC);
			if (skb2)
				ipmr_queue_xmit(net, mrt, skb2, cache, psend);
		} else {
			ipmr_queue_xmit(net, mrt, skb, cache, psend);
			return 0;
		}
	}
dont_forward:
	if (!local)
		kfree_skb(skb);
	return 0;
}

static void ipmr_queue_xmit(struct net *net, struct mr_table *mrt,
			    struct sk_buff *skb, struct mfc_cache *c, int vifi)
{
	const struct iphdr *iph = ip_hdr(skb);
	struct vif_device *vif = &mrt->vif_table[vifi];
	struct net_device *dev;
	struct rtable *rt;
	struct flowi4 fl4;
	
	int encap = 0;
	if (vif->dev == NULL)
		goto out_free;	
#ifdef CONFIG_IP_PIMSM
	if (vif->flags & VIFF_REGISTER) {
		vif->pkt_out++;
		vif->bytes_out += skb->len;
		vif->dev->stats.tx_bytes += skb->len;
		vif->dev->stats.tx_packets++;
		ipmr_cache_report(mrt, skb, vifi, IGMPMSG_WHOLEPKT);
		goto out_free;
	}
#endif	

	if (vif->flags & VIFF_TUNNEL) {
		rt = ip_route_output_ports(net, &fl4, NULL,
			vif->remote, vif->local,
			0, 0,
			IPPROTO_IPIP,
			RT_TOS(iph->tos), vif->link);
		if (IS_ERR(rt))
			goto out_free;
		encap = sizeof(struct iphdr);
	} else {
		rt = ip_route_output_ports(net, &fl4, NULL, iph->daddr, 0,
			0, 0,
			IPPROTO_IPIP,
			RT_TOS(iph->tos), vif->link);
		if (IS_ERR(rt))
			goto out_free;
	}
	dev = rt->dst.dev;
	
	if (skb->len+encap > dst_mtu(&rt->dst) && (ntohs(iph->frag_off) & IP_DF)) {
		/* Do not fragment multicasts. Alas, IPv4 does not
		* allow to send ICMP, so that packets will disappear
		* to blackhole.
		*/
		IP_INC_STATS_BH(dev_net(dev), IPSTATS_MIB_FRAGFAILS);
		ip_rt_put(rt);
		goto out_free;
	}	
	encap += LL_RESERVED_SPACE(dev) + rt->dst.header_len;
	if (skb_cow(skb, encap)) {
		ip_rt_put(rt);
		goto out_free;
	}
	vif->pkt_out++;
	vif->bytes_out += skb->len;
	skb_dst_drop(skb);
	skb_dst_set(skb, &rt->dst);
	ip_decrease_ttl(ip_hdr(skb));
	
	/* FIXME: forward and output firewalls used to be called here.
	* What do we do with netfilter? -- RR
	*/
	if (vif->flags & VIFF_TUNNEL) {
		ip_encap(skb, vif->local, vif->remote);
		/* FIXME: extra output firewall step used to be here. --RR */
		vif->dev->stats.tx_packets++;
		vif->dev->stats.tx_bytes += skb->len;
	}
	IPCB(skb)->flags |= IPSKB_FORWARDED;
	
	/*
	* RFC1584 teaches, that DVMRP/PIM router must deliver packets locally
	* not only before forwarding, but after forwarding on all output
	* interfaces. It is clear, if mrouter runs a multicasting
	* program, it should receive packets not depending to what interface
	* program is joined.
	* If we will not make it, the program will have to join on all
	* interfaces. On the other hand, multihoming host (or router, but
	* not mrouter) cannot join to more than one interface - it will
	* result in receiving multiple packets.
	*/
	
	NF_HOOK(NFPROTO_IPV4, NF_INET_FORWARD, skb, skb->dev, dev,
		ipmr_forward_finish);
	return;
out_free:
	kfree_skb(skb);
}


static inline int ipmr_forward_finish(struct sk_buff *skb)
{
	struct ip_options *opt = &(IPCB(skb)->opt);
	IP_INC_STATS_BH(dev_net(skb_dst(skb)->dev), IPSTATS_MIB_OUTFORWDATAGRAMS);
	IP_ADD_STATS_BH(dev_net(skb_dst(skb)->dev), IPSTATS_MIB_OUTOCTETS, skb->len);

	if (unlikely(opt->optlen))
		ip_forward_options(skb);
	return dst_output(skb);
}	


struct fib4_rule {
	struct fib_rule common;
	u8 dst_len;
	u8 src_len;
	u8 tos;
	_be32 src;
	_be32 srcmask;
	_be32 dst;
	_be32 dstmask;
#ifdef CONFIG_IP_ROUTE_CLASSID
	u32 tclassid;
#endif
};
(net/ipv4/fib_rules.c)

struct rtable *__ip_route_output_key(struct net *net, struct flowi4 *fl4) {
. . .
#ifdef CONFIG_IP_ROUTE_MULTIPATH
	if (res.fi->fib_nhs > 1 && fl4->flowi4_oif == 0)
		fib_select_multipath(&res);
	else
#endif
. . .
}




